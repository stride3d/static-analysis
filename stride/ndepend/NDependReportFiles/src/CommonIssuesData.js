var commonIssuesData='{"baselineAvailable":"False","rules":[{"id":"ND1000","name":"Avoid types too big","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query2071458910"},{"id":"ND1001","name":"Avoid types with too many methods","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query1588423785"},{"id":"ND1002","name":"Avoid types with too many fields","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query3987449205"},{"id":"ND1003","name":"Avoid methods too big, too complex","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query2368539037"},{"id":"ND1004","name":"Avoid methods with too many parameters","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query1685837031"},{"id":"ND1005","name":"Avoid methods with too many overloads","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query3814626502"},{"id":"ND1006","name":"Avoid methods potentially poorly commented","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query4051380568"},{"id":"ND1007","name":"Avoid types with poor cohesion","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query2871226987"},{"id":"ND1200","name":"Avoid interfaces too big","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query1702099707"},{"id":"ND1201","name":"Base class should not use derivatives","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query2611900747"},{"id":"ND1202","name":"Class shouldn\'t be too deep in inheritance tree","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query585191978"},{"id":"ND1203","name":"Class with no descendant should be sealed if possible","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query2132437556"},{"id":"ND1204","name":"Overrides of Method() should call base.Method()","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query270241827"},{"id":"ND1205","name":"Do not hide base class methods","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query1170220510"},{"id":"ND1206","name":"A stateless class or structure might be turned into a static type","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query3283078776"},{"id":"ND1207","name":"Non-static classes should be instantiated or turned to static","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query818888869"},{"id":"ND1208","name":"Methods should be declared static if possible","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query46159255"},{"id":"ND1209","name":"Constructor should not call a virtual method","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query1969388168"},{"id":"ND1210","name":"Avoid the Singleton pattern","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query3606833299"},{"id":"ND1211","name":"Don\'t assign static fields from instance methods","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query4233398515"},{"id":"ND1212","name":"Avoid empty interfaces","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query151566768"},{"id":"ND1213","name":"Avoid types initialization cycles","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query2432588237"},{"id":"ND1300","name":"Avoid custom delegates","cat":"Design","url":"../../NDependReport.html?e=1#Query2822976329"},{"id":"ND1301","name":"Types with disposable instance fields must be disposable","cat":"Design","url":"../../NDependReport.html?e=1#Query3767367450"},{"id":"ND1304","name":"Classes that are candidate to be turned into structures","cat":"Design","url":"../../NDependReport.html?e=1#Query887586783"},{"id":"ND1305","name":"Avoid namespaces with few types","cat":"Design","url":"../../NDependReport.html?e=1#Query3431837327"},{"id":"ND1306","name":"Nested types should not be visible","cat":"Design","url":"../../NDependReport.html?e=1#Query442335452"},{"id":"ND1307","name":"Declare types in namespaces","cat":"Design","url":"../../NDependReport.html?e=1#Query1748245689"},{"id":"ND1309","name":"Instances size shouldn\'t be too big","cat":"Design","url":"../../NDependReport.html?e=1#Query2073373475"},{"id":"ND1310","name":"Attribute classes should be sealed","cat":"Design","url":"../../NDependReport.html?e=1#Query1402225742"},{"id":"ND1311","name":"Don\'t use obsolete types, methods or fields","cat":"Design","url":"../../NDependReport.html?e=1#Query1809180291"},{"id":"ND1312","name":"Do implement methods that throw NotImplementedException","cat":"Design","url":"../../NDependReport.html?e=1#Query187080949"},{"id":"ND1313","name":"Override equals and operator equals on value types","cat":"Design","url":"../../NDependReport.html?e=1#Query2569341786"},{"id":"ND1400","name":"Avoid namespaces mutually dependent","cat":"Architecture","url":"../../NDependReport.html?e=1#Query1653453125"},{"id":"ND1401","name":"Avoid namespaces dependency cycles","cat":"Architecture","url":"../../NDependReport.html?e=1#Query628377565"},{"id":"ND1406","name":"Namespaces with poor cohesion (RelationalCohesion)","cat":"Architecture","url":"../../NDependReport.html?e=1#Query3777573133"},{"id":"ND1407","name":"Assemblies that don\'t satisfy the Abstractness/Instability principle","cat":"Architecture","url":"../../NDependReport.html?e=1#Query2107502245"},{"id":"ND1700","name":"Potentially Dead Types","cat":"Dead Code","url":"../../NDependReport.html?e=1#Query3912344400"},{"id":"ND1701","name":"Potentially Dead Methods","cat":"Dead Code","url":"../../NDependReport.html?e=1#Query1236384003"},{"id":"ND1702","name":"Potentially Dead Fields","cat":"Dead Code","url":"../../NDependReport.html?e=1#Query828230298"},{"id":"ND3101","name":"Don\'t use System.Random for security purposes","cat":"Security","url":"../../NDependReport.html?e=1#Query3492615079"},{"id":"ND3104","name":"Review publicly visible event handlers","cat":"Security","url":"../../NDependReport.html?e=1#Query3731436063"},{"id":"ND3105","name":"Pointers should not be publicly visible","cat":"Security","url":"../../NDependReport.html?e=1#Query2563474960"},{"id":"ND3106","name":"Seal methods that satisfy non-public interfaces","cat":"Security","url":"../../NDependReport.html?e=1#Query844217122"},{"id":"ND1800","name":"Methods that could have a lower visibility","cat":"Visibility","url":"../../NDependReport.html?e=1#Query3956120347"},{"id":"ND1801","name":"Types that could have a lower visibility","cat":"Visibility","url":"../../NDependReport.html?e=1#Query1851038856"},{"id":"ND1802","name":"Fields that could have a lower visibility","cat":"Visibility","url":"../../NDependReport.html?e=1#Query665364738"},{"id":"ND1803","name":"Types that could be declared as private, nested in a parent type","cat":"Visibility","url":"../../NDependReport.html?e=1#Query4257738350"},{"id":"ND1804","name":"Avoid publicly visible constant fields","cat":"Visibility","url":"../../NDependReport.html?e=1#Query456168778"},{"id":"ND1805","name":"Fields should be declared as private or protected","cat":"Visibility","url":"../../NDependReport.html?e=1#Query2734159706"},{"id":"ND1806","name":"Constructors of abstract classes should be declared as protected or private","cat":"Visibility","url":"../../NDependReport.html?e=1#Query4289619194"},{"id":"ND1807","name":"Avoid public methods not publicly visible","cat":"Visibility","url":"../../NDependReport.html?e=1#Query2977263888"},{"id":"ND1808","name":"Event handler methods should be declared as private or protected","cat":"Visibility","url":"../../NDependReport.html?e=1#Query3696148407"},{"id":"ND1810","name":"Exception classes should be declared as public","cat":"Visibility","url":"../../NDependReport.html?e=1#Query788391830"},{"id":"ND1900","name":"Fields should be marked as ReadOnly when possible","cat":"Immutability","url":"../../NDependReport.html?e=1#Query2144868306"},{"id":"ND1901","name":"Avoid non-readonly static fields","cat":"Immutability","url":"../../NDependReport.html?e=1#Query1757686740"},{"id":"ND1902","name":"Avoid static fields with a mutable field type","cat":"Immutability","url":"../../NDependReport.html?e=1#Query4019283338"},{"id":"ND1903","name":"Structures should be immutable","cat":"Immutability","url":"../../NDependReport.html?e=1#Query2727642282"},{"id":"ND1914","name":"Immutable struct should be declared as readonly","cat":"Immutability","url":"../../NDependReport.html?e=1#Query4169294673"},{"id":"ND1904","name":"Property Getters should be pure","cat":"Immutability","url":"../../NDependReport.html?e=1#Query3582390521"},{"id":"ND1905","name":"A field must not be assigned from outside its parent hierarchy types","cat":"Immutability","url":"../../NDependReport.html?e=1#Query567343204"},{"id":"ND1906","name":"Don\'t assign a field from many methods","cat":"Immutability","url":"../../NDependReport.html?e=1#Query1975613094"},{"id":"ND1907","name":"Do not declare read only fields with mutable reference types","cat":"Immutability","url":"../../NDependReport.html?e=1#Query2345449560"},{"id":"ND1908","name":"Public read only array fields can be modified","cat":"Immutability","url":"../../NDependReport.html?e=1#Query1579534559"},{"id":"ND1913","name":"Record should be immutable","cat":"Immutability","url":"../../NDependReport.html?e=1#Query3168586784"},{"id":"ND2000","name":"Instance fields naming convention","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query1161431673"},{"id":"ND2001","name":"Static fields naming convention","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query1160401199"},{"id":"ND2003","name":"Abstract base class should be suffixed with \'Base\'","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query3500616363"},{"id":"ND2006","name":"Types name should begin with an Upper character","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query1800655636"},{"id":"ND2007","name":"Methods name should begin with an Upper character","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query445447623"},{"id":"ND2008","name":"Do not name enum values \'Reserved\'","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query2592629244"},{"id":"ND2009","name":"Avoid types with name too long","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query875021017"},{"id":"ND2010","name":"Avoid methods with name too long","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query399742796"},{"id":"ND2011","name":"Avoid fields with name too long","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query2570016224"},{"id":"ND2012","name":"Avoid having different types with same name","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query1043522630"},{"id":"ND2013","name":"Avoid prefixing type name with parent namespace name","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query3170948257"},{"id":"ND2014","name":"Avoid naming types and namespaces with the same identifier","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query3676512747"},{"id":"ND2015","name":"Don\'t call your method Dispose","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query1773559064"},{"id":"ND2016","name":"Methods prefixed with \'Try\' should return a boolean","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query1300267453"},{"id":"ND2017","name":"Properties and fields that represent a collection of items should be named Items.","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query2015295261"},{"id":"ND2019","name":"Avoid fields with same name in class hierarchy","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query2772704845"},{"id":"ND2020","name":"Avoid various capitalizations for method name","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query2904491536"},{"id":"ND2022","name":"Nested class members should not mask outer class\' static members","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query2976418339"},{"id":"ND2100","name":"Avoid referencing source file out of the project directory","cat":"Source Files Organization","url":"../../NDependReport.html?e=1#Query3389572867"},{"id":"ND2101","name":"Avoid duplicating a type definition across assemblies","cat":"Source Files Organization","url":"../../NDependReport.html?e=1#Query1552916210"},{"id":"ND2102","name":"Avoid defining multiple types in a source file","cat":"Source Files Organization","url":"../../NDependReport.html?e=1#Query3680765393"},{"id":"ND2103","name":"Namespace name should correspond to file location","cat":"Source Files Organization","url":"../../NDependReport.html?e=1#Query754292209"},{"id":"ND2104","name":"Types with source files stored in the same directory, should be declared in the same namespace","cat":"Source Files Organization","url":"../../NDependReport.html?e=1#Query3089515900"},{"id":"ND2105","name":"Types declared in the same namespace, should have their source files stored in the same directory","cat":"Source Files Organization","url":"../../NDependReport.html?e=1#Query954528203"},{"id":"ND2206","name":"Enum Storage should be Int32","cat":"System","url":"../../NDependReport.html?e=1#Query2318073070"},{"id":"ND2207","name":"Do not raise too general exception types","cat":"System","url":"../../NDependReport.html?e=1#Query3578711362"},{"id":"ND2208","name":"Do not raise reserved exception types","cat":"System","url":"../../NDependReport.html?e=1#Query1276885108"},{"id":"ND2209","name":"Uri fields or properties should be of type System.Uri","cat":"System","url":"../../NDependReport.html?e=1#Query3640264196"},{"id":"ND2210","name":"Types should not derive from System.ApplicationException","cat":"System","url":"../../NDependReport.html?e=1#Query566412427"},{"id":"ND2211","name":"Don\'t Implement ICloneable","cat":"System","url":"../../NDependReport.html?e=1#Query3211687696"},{"id":"ND2300","name":"Collection properties should be read only","cat":"System.Collections","url":"../../NDependReport.html?e=1#Query54113441"},{"id":"ND2400","name":"P/Invokes should be static and not be publicly visible","cat":"System.Runtime.InteropServices","url":"../../NDependReport.html?e=1#Query43820613"},{"id":"ND2401","name":"Move P/Invokes to NativeMethods class","cat":"System.Runtime.InteropServices","url":"../../NDependReport.html?e=1#Query3969053494"},{"id":"ND2500","name":"Don\'t create threads explicitly","cat":"System.Threading","url":"../../NDependReport.html?e=1#Query3840674017"},{"id":"ND2501","name":"Don\'t use dangerous threading methods","cat":"System.Threading","url":"../../NDependReport.html?e=1#Query589394765"},{"id":"ND2502","name":"Monitor TryEnter/Exit must be both called within the same method","cat":"System.Threading","url":"../../NDependReport.html?e=1#Query848581524"},{"id":"ND2600","name":"Method should not return concrete XmlNode","cat":"System.Xml","url":"../../NDependReport.html?e=1#Query3296168390"},{"id":"ND2700","name":"Float and Date Parsing must be culture aware","cat":"System.Globalization","url":"../../NDependReport.html?e=1#Query3992523250"},{"id":"ND2800","name":"Mark assemblies with assembly version","cat":"System.Reflection","url":"../../NDependReport.html?e=1#Query1878044810"},{"id":"ND2801","name":"Assemblies should have the same version","cat":"System.Reflection","url":"../../NDependReport.html?e=1#Query148586609"},{"id":"CA1822","name":"Mark members as static","cat":"Performance","url":"../../NDependReport.html?e=1#Query3933497090"},{"id":"CA1834","name":"Consider using \'StringBuilder.Append(char)\' when applicable","cat":"Performance","url":"../../NDependReport.html?e=1#Query1925963927"},{"id":"CA1859","name":"Use concrete types when possible for improved performance","cat":"Performance","url":"../../NDependReport.html?e=1#Query2394478153"},{"id":"CA1868","name":"Unnecessary call to \'Contains(item)\'","cat":"Performance","url":"../../NDependReport.html?e=1#Query1874718022"},{"id":"CA1068","name":"CancellationToken parameters must come last","cat":"Design","url":"../../NDependReport.html?e=1#Query2792793828"},{"id":"CA1416","name":"Validate platform compatibility","cat":"Interoperability","url":"../../NDependReport.html?e=1#Query1883437633"},{"id":"CA1507","name":"Use nameof to express symbol names","cat":"Maintainability","url":"../../NDependReport.html?e=1#Query1277871580"},{"id":"CA1510","name":"Use ArgumentNullException throw helper","cat":"Maintainability","url":"../../NDependReport.html?e=1#Query221110313"},{"id":"CA1806","name":"Do not ignore method results","cat":"Performance","url":"../../NDependReport.html?e=1#Query3719420263"},{"id":"CA1825","name":"Avoid zero-length array allocations","cat":"Performance","url":"../../NDependReport.html?e=1#Query965799647"},{"id":"CA1845","name":"Use span-based \'string.Concat\'","cat":"Performance","url":"../../NDependReport.html?e=1#Query3280711110"},{"id":"CA1854","name":"Prefer the \'IDictionary.TryGetValue(TKey, out TValue)\' method","cat":"Performance","url":"../../NDependReport.html?e=1#Query2635091426"},{"id":"CA1860","name":"Avoid using \'Enumerable.Any()\' extension method","cat":"Performance","url":"../../NDependReport.html?e=1#Query563408957"},{"id":"CA1861","name":"Avoid constant arrays as arguments","cat":"Performance","url":"../../NDependReport.html?e=1#Query237589219"},{"id":"CA1870","name":"Use a cached \'SearchValues\' instance","cat":"Performance","url":"../../NDependReport.html?e=1#Query3315593788"},{"id":"CA2208","name":"Instantiate argument exceptions correctly","cat":"Usage","url":"../../NDependReport.html?e=1#Query1541418173"},{"id":"CA2211","name":"Non-constant fields should not be visible","cat":"Usage","url":"../../NDependReport.html?e=1#Query1257877206"},{"id":"CS0436","name":"Type conflicts with imported type","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3042493189"},{"id":"CS0618","name":"Type or member is obsolete","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3226815482"},{"id":"CS1998","name":"Async method lacks \'await\' operators and will run synchronously","cat":"Compiler","url":"../../NDependReport.html?e=1#Query36634269"},{"id":"STRDIAG005","name":"Readonly Member Type is not supported","cat":"Serialization","url":"../../NDependReport.html?e=1#Query3179493263"},{"id":"STRDIAG010","name":"Invalid Constructor","cat":"Serialization","url":"../../NDependReport.html?e=1#Query2981622060"},{"id":"SYSLIB1045","name":"Convert to \'GeneratedRegexAttribute\'.","cat":"Performance","url":"../../NDependReport.html?e=1#Query4097015881"},{"id":"CA1041","name":"Provide ObsoleteAttribute message","cat":"Design","url":"../../NDependReport.html?e=1#Query3391139452"},{"id":"CA1512","name":"Use ArgumentOutOfRangeException throw helper","cat":"Maintainability","url":"../../NDependReport.html?e=1#Query689384369"},{"id":"CA1816","name":"Dispose methods should call SuppressFinalize","cat":"Usage","url":"../../NDependReport.html?e=1#Query3106148979"},{"id":"CA1826","name":"Do not use Enumerable methods on indexable collections","cat":"Performance","url":"../../NDependReport.html?e=1#Query2954337924"},{"id":"CA1829","name":"Use Length/Count property instead of Count() when available","cat":"Performance","url":"../../NDependReport.html?e=1#Query2427005929"},{"id":"CA1846","name":"Prefer \'AsSpan\' over \'Substring\'","cat":"Performance","url":"../../NDependReport.html?e=1#Query1522219224"},{"id":"CA1862","name":"Use the \'StringComparison\' method overloads to perform case-insensitive string comparisons","cat":"Performance","url":"../../NDependReport.html?e=1#Query1281021953"},{"id":"CA2016","name":"Forward the \'CancellationToken\' parameter to methods","cat":"Reliability","url":"../../NDependReport.html?e=1#Query598954519"},{"id":"CA2245","name":"Do not assign a property to itself","cat":"Usage","url":"../../NDependReport.html?e=1#Query3839278045"},{"id":"CS0612","name":"Type or member is obsolete","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3226815482"},{"id":"CS4014","name":"Because this call is not awaited, execution of the current method continues before the call is completed","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1468850040"},{"id":"RS1024","name":"Compare symbols correctly","cat":"MicrosoftCodeAnalysisCorrectness","url":"../../NDependReport.html?e=1#Query3402638807"},{"id":"CA1060","name":"Move pinvokes to native methods class","cat":"Design","url":"../../NDependReport.html?e=1#Query1143431052"},{"id":"CA1063","name":"Implement IDisposable Correctly","cat":"Design","url":"../../NDependReport.html?e=1#Query37843465"},{"id":"CA1065","name":"Do not raise exceptions in unexpected locations","cat":"Design","url":"../../NDependReport.html?e=1#Query4284431930"},{"id":"CA1401","name":"P/Invokes should not be visible","cat":"Interoperability","url":"../../NDependReport.html?e=1#Query2967020901"},{"id":"CA1513","name":"Use ObjectDisposedException throw helper","cat":"Maintainability","url":"../../NDependReport.html?e=1#Query303049875"},{"id":"CA2213","name":"Disposable fields should be disposed","cat":"Usage","url":"../../NDependReport.html?e=1#Query1472684614"},{"id":"CA2216","name":"Disposable types should declare finalizer","cat":"Usage","url":"../../NDependReport.html?e=1#Query3856335940"},{"id":"CS0649","name":"Field is never assigned to, and will always have its default value","cat":"Compiler","url":"../../NDependReport.html?e=1#Query4221798978"},{"id":"SYSLIB1054","name":"Use \'LibraryImportAttribute\' instead of \'DllImportAttribute\' to generate P/Invoke marshalling code at compile time","cat":"Interoperability","url":"../../NDependReport.html?e=1#Query4164911918"},{"id":"CS1030","name":"#warning directive","cat":"Compiler","url":"../../NDependReport.html?e=1#Query4035463880"},{"id":"CA1050","name":"Declare types in namespaces","cat":"Design","url":"../../NDependReport.html?e=1#Query3267121640"},{"id":"CS8601","name":"Possible null reference assignment.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3831053610"},{"id":"CS8602","name":"Dereference of a possibly null reference.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1707325399"},{"id":"CS8604","name":"Possible null reference argument.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1318982231"},{"id":"CS8618","name":"Non-nullable field must contain a non-null value when exiting constructor. Consider adding the \'required\' modifier or declaring as nullable.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query131454764"},{"id":"CS8625","name":"Cannot convert null literal to non-nullable reference type.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query167527053"},{"id":"CA1069","name":"Enums values should not be duplicated","cat":"Design","url":"../../NDependReport.html?e=1#Query3311764292"},{"id":"CA1835","name":"Prefer the \'Memory\'-based overloads for \'ReadAsync\' and \'WriteAsync\'","cat":"Performance","url":"../../NDependReport.html?e=1#Query1232512311"},{"id":"CA1067","name":"Override Object.Equals(object) when implementing IEquatable<T>","cat":"Design","url":"../../NDependReport.html?e=1#Query3375486401"},{"id":"CA2249","name":"Consider using \'string.Contains\' instead of \'string.IndexOf\'","cat":"Usage","url":"../../NDependReport.html?e=1#Query1813800958"},{"id":"CS0169","name":"Field is never used","cat":"Compiler","url":"../../NDependReport.html?e=1#Query2572023657"},{"id":"CS8632","name":"The annotation for nullable reference types should only be used in code within a \'#nullable\' annotations context.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1329586306"},{"id":"CA1018","name":"Mark attributes with AttributeUsageAttribute","cat":"Design","url":"../../NDependReport.html?e=1#Query2742960475"},{"id":"CS0659","name":"Type overrides Object.Equals(object o) but does not override Object.GetHashCode()","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1217933180"},{"id":"CS8600","name":"Converting null literal or possible null value to non-nullable type.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query2038974623"},{"id":"CS8603","name":"Possible null reference return.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3664870188"},{"id":"CS8767","name":"Nullability of reference types in type of parameter doesn\'t match implicitly implemented member (possibly because of nullability attributes).","cat":"Compiler","url":"../../NDependReport.html?e=1#Query360527378"},{"id":"CA2231","name":"Overload operator equals on overriding value type Equals","cat":"Usage","url":"../../NDependReport.html?e=1#Query850258581"},{"id":"CA2219","name":"Do not raise exceptions in finally clauses","cat":"Usage","url":"../../NDependReport.html?e=1#Query3246345506"},{"id":"CS8769","name":"Nullability of reference types in type of parameter doesn\'t match implemented member (possibly because of nullability attributes).","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1160648430"},{"id":"STRDIAG009","name":"Invalid Dictionary Key","cat":"Serialization","url":"../../NDependReport.html?e=1#Query2572057264"},{"id":"CA1001","name":"Types that own disposable fields should be disposable","cat":"Design","url":"../../NDependReport.html?e=1#Query3147031402"},{"id":"CA1033","name":"Interface methods should be callable by child types","cat":"Design","url":"../../NDependReport.html?e=1#Query860972150"},{"id":"CA2214","name":"Do not call overridable methods in constructors","cat":"Usage","url":"../../NDependReport.html?e=1#Query1803693166"},{"id":"CS8669","name":"The annotation for nullable reference types should only be used in code within a \'#nullable\' annotations context. Auto-generated code requires an explicit \'#nullable\' directive in source.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query544898808"},{"id":"CS8762","name":"Parameter must have a non-null value when exiting in some condition.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1943031706"},{"id":"CA2207","name":"Initialize value type static fields inline","cat":"Usage","url":"../../NDependReport.html?e=1#Query2238562819"},{"id":"CA1070","name":"Do not declare event fields as virtual","cat":"Design","url":"../../NDependReport.html?e=1#Query781237392"},{"id":"CS8619","name":"Nullability of reference types in value doesn\'t match target type.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1871357255"},{"id":"CS8621","name":"Nullability of reference types in return type doesn\'t match the target delegate (possibly because of nullability attributes).","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1130584020"},{"id":"CA1837","name":"Use \'Environment.ProcessId\'","cat":"Performance","url":"../../NDependReport.html?e=1#Query933497690"},{"id":"CA2101","name":"Specify marshaling for P/Invoke string arguments","cat":"Globalization","url":"../../NDependReport.html?e=1#Query3989005816"},{"id":"CA2248","name":"Provide correct \'enum\' argument to \'Enum.HasFlag\'","cat":"Usage","url":"../../NDependReport.html?e=1#Query2930393572"},{"id":"CS0414","name":"Field is assigned but its value is never used","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3998368377"},{"id":"CS8620","name":"Argument cannot be used for parameter due to differences in the nullability of reference types.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1374429927"},{"id":"CA2002","name":"Do not lock on objects with weak identity","cat":"Reliability","url":"../../NDependReport.html?e=1#Query3674098549"},{"id":"CA1847","name":"Use char literal for a single character lookup","cat":"Performance","url":"../../NDependReport.html?e=1#Query2826861909"},{"id":"CA1865","name":"Use char overload","cat":"Performance","url":"../../NDependReport.html?e=1#Query2796870182"},{"id":"CA1830","name":"Prefer strongly-typed Append and Insert method overloads on StringBuilder","cat":"Performance","url":"../../NDependReport.html?e=1#Query4244720278"},{"id":"CA1864","name":"Prefer the \'IDictionary.TryAdd(TKey, TValue)\' method","cat":"Performance","url":"../../NDependReport.html?e=1#Query2788322656"},{"id":"SYSLIB0013","name":"Type or member is obsolete","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3226815482"},{"id":"CS0675","name":"Bitwise-or operator used on a sign-extended operand","cat":"Compiler","url":"../../NDependReport.html?e=1#Query2744586969"},{"id":"STRIDE2000","name":"Type or member is obsolete","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3226815482"},{"id":"SYSLIB0039","name":"Type or member is obsolete","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3226815482"},{"id":"CA1840","name":"Use \'Environment.CurrentManagedThreadId\'","cat":"Performance","url":"../../NDependReport.html?e=1#Query2276595371"},{"id":"CS9192","name":"Argument should be passed with \'ref\' or \'in\' keyword","cat":"Compiler","url":"../../NDependReport.html?e=1#Query2495654502"},{"id":"CS9193","name":"Argument should be a variable because it is passed to a \'ref readonly\' parameter","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1226969250"},{"id":"CS9195","name":"Argument should be passed with the \'in\' keyword","cat":"Compiler","url":"../../NDependReport.html?e=1#Query2076462248"},{"id":"CA2020","name":"Prevent behavioral change","cat":"Reliability","url":"../../NDependReport.html?e=1#Query462436021"},{"id":"CA1855","name":"Prefer \'Clear\' over \'Fill\'","cat":"Performance","url":"../../NDependReport.html?e=1#Query1748161002"},{"id":"CA1850","name":"Prefer static \'HashData\' method over \'ComputeHash\'","cat":"Performance","url":"../../NDependReport.html?e=1#Query3214456173"},{"id":"SYSLIB0021","name":"Type or member is obsolete","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3226815482"},{"id":"CA1853","name":"Unnecessary call to \'Dictionary.ContainsKey(key)\'","cat":"Performance","url":"../../NDependReport.html?e=1#Query1231210638"},{"id":"SYSLIB0051","name":"Type or member is obsolete","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3226815482"}]}'