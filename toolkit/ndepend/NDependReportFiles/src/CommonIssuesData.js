var commonIssuesData='{"baselineAvailable":"True","baselineDesc":"Compare with particular analysis result GitHub Build# 4 obtained on 01 Jun 2024 21:35:54","rules":[{"id":"ND1000","name":"Avoid types too big","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query2071458910"},{"id":"ND1001","name":"Avoid types with too many methods","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query1588423785"},{"id":"ND1002","name":"Avoid types with too many fields","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query3987449205"},{"id":"ND1003","name":"Avoid methods too big, too complex","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query2368539037"},{"id":"ND1004","name":"Avoid methods with too many parameters","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query1685837031"},{"id":"ND1005","name":"Avoid methods with too many overloads","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query3814626502"},{"id":"ND1006","name":"Avoid methods potentially poorly commented","cat":"Code Smells","url":"../../NDependReport.html?e=1#Query4051380568"},{"id":"ND1104","name":"Avoid making complex methods even more complex","cat":"Code Smells Regression","url":"../../NDependReport.html?e=1#Query3626392132"},{"id":"ND1203","name":"Class with no descendant should be sealed if possible","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query2132437556"},{"id":"ND1206","name":"A stateless class or structure might be turned into a static type","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query3283078776"},{"id":"ND1207","name":"Non-static classes should be instantiated or turned to static","cat":"Object Oriented Design","url":"../../NDependReport.html?e=1#Query818888869"},{"id":"ND1305","name":"Avoid namespaces with few types","cat":"Design","url":"../../NDependReport.html?e=1#Query3431837327"},{"id":"ND1306","name":"Nested types should not be visible","cat":"Design","url":"../../NDependReport.html?e=1#Query442335452"},{"id":"ND1307","name":"Declare types in namespaces","cat":"Design","url":"../../NDependReport.html?e=1#Query1748245689"},{"id":"ND1309","name":"Instances size shouldn\'t be too big","cat":"Design","url":"../../NDependReport.html?e=1#Query2073373475"},{"id":"ND1313","name":"Override equals and operator equals on value types","cat":"Design","url":"../../NDependReport.html?e=1#Query2569341786"},{"id":"ND1400","name":"Avoid namespaces mutually dependent","cat":"Architecture","url":"../../NDependReport.html?e=1#Query1653453125"},{"id":"ND1401","name":"Avoid namespaces dependency cycles","cat":"Architecture","url":"../../NDependReport.html?e=1#Query628377565"},{"id":"ND1700","name":"Potentially Dead Types","cat":"Dead Code","url":"../../NDependReport.html?e=1#Query3912344400"},{"id":"ND1701","name":"Potentially Dead Methods","cat":"Dead Code","url":"../../NDependReport.html?e=1#Query1236384003"},{"id":"ND1702","name":"Potentially Dead Fields","cat":"Dead Code","url":"../../NDependReport.html?e=1#Query828230298"},{"id":"ND3101","name":"Don\'t use System.Random for security purposes","cat":"Security","url":"../../NDependReport.html?e=1#Query3492615079"},{"id":"ND1800","name":"Methods that could have a lower visibility","cat":"Visibility","url":"../../NDependReport.html?e=1#Query3956120347"},{"id":"ND1801","name":"Types that could have a lower visibility","cat":"Visibility","url":"../../NDependReport.html?e=1#Query1851038856"},{"id":"ND1802","name":"Fields that could have a lower visibility","cat":"Visibility","url":"../../NDependReport.html?e=1#Query665364738"},{"id":"ND1804","name":"Avoid publicly visible constant fields","cat":"Visibility","url":"../../NDependReport.html?e=1#Query456168778"},{"id":"ND1805","name":"Fields should be declared as private or protected","cat":"Visibility","url":"../../NDependReport.html?e=1#Query2734159706"},{"id":"ND1807","name":"Avoid public methods not publicly visible","cat":"Visibility","url":"../../NDependReport.html?e=1#Query2977263888"},{"id":"ND1900","name":"Fields should be marked as ReadOnly when possible","cat":"Immutability","url":"../../NDependReport.html?e=1#Query2144868306"},{"id":"ND1901","name":"Avoid non-readonly static fields","cat":"Immutability","url":"../../NDependReport.html?e=1#Query1757686740"},{"id":"ND1903","name":"Structures should be immutable","cat":"Immutability","url":"../../NDependReport.html?e=1#Query2727642282"},{"id":"ND1914","name":"Immutable struct should be declared as readonly","cat":"Immutability","url":"../../NDependReport.html?e=1#Query4169294673"},{"id":"ND1905","name":"A field must not be assigned from outside its parent hierarchy types","cat":"Immutability","url":"../../NDependReport.html?e=1#Query567343204"},{"id":"ND1906","name":"Don\'t assign a field from many methods","cat":"Immutability","url":"../../NDependReport.html?e=1#Query1975613094"},{"id":"ND2000","name":"Instance fields naming convention","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query1161431673"},{"id":"ND2001","name":"Static fields naming convention","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query1160401199"},{"id":"ND2003","name":"Abstract base class should be suffixed with \'Base\'","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query3500616363"},{"id":"ND2007","name":"Methods name should begin with an Upper character","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query445447623"},{"id":"ND2012","name":"Avoid having different types with same name","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query1043522630"},{"id":"ND2013","name":"Avoid prefixing type name with parent namespace name","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query3170948257"},{"id":"ND2020","name":"Avoid various capitalizations for method name","cat":"Naming Conventions","url":"../../NDependReport.html?e=1#Query2904491536"},{"id":"ND2102","name":"Avoid defining multiple types in a source file","cat":"Source Files Organization","url":"../../NDependReport.html?e=1#Query3680765393"},{"id":"ND2103","name":"Namespace name should correspond to file location","cat":"Source Files Organization","url":"../../NDependReport.html?e=1#Query754292209"},{"id":"ND2104","name":"Types with source files stored in the same directory, should be declared in the same namespace","cat":"Source Files Organization","url":"../../NDependReport.html?e=1#Query3089515900"},{"id":"ND2206","name":"Enum Storage should be Int32","cat":"System","url":"../../NDependReport.html?e=1#Query2318073070"},{"id":"CS8618","name":"Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query2062532299"},{"id":"CS0169","name":"Field is never used","cat":"Compiler","url":"../../NDependReport.html?e=1#Query2572023657"},{"id":"CS0219","name":"Variable is assigned but its value is never used","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3738200122"},{"id":"CS0414","name":"Field is assigned but its value is never used","cat":"Compiler","url":"../../NDependReport.html?e=1#Query3998368377"},{"id":"CS8602","name":"Dereference of a possibly null reference.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query1707325399"},{"id":"CA1859","name":"Use concrete types when possible for improved performance","cat":"Performance","url":"../../NDependReport.html?e=1#Query2394478153"},{"id":"CA1050","name":"Declare types in namespaces","cat":"Design","url":"../../NDependReport.html?e=1#Query3267121640"},{"id":"CA1822","name":"Mark members as static","cat":"Performance","url":"../../NDependReport.html?e=1#Query3933497090"},{"id":"CS1030","name":"#warning directive","cat":"Compiler","url":"../../NDependReport.html?e=1#Query4035463880"},{"id":"CS8625","name":"Cannot convert null literal to non-nullable reference type.","cat":"Compiler","url":"../../NDependReport.html?e=1#Query167527053"},{"id":"ND1208","name":"Methods should be declared static if possible","cat":"Object Oriented Design"},{"id":"CA1507","name":"Use nameof to express symbol names","cat":"Maintainability"}]}'